
import requests
import json



def getLocationInformation(event, context):
    if event is None:
        return {'status': 'Error'}
    print(event)
    if event['start_placeid'] is None or len(event['start_placeid']) == 0:
        return {'status': 'Error'}

    if event['end_placeid'] is None or len(event['end_placeid']) == 0:
        return {'status': 'Error'}

    if event['mode'] is None or len(event['mode']) == 0:
        return {'status': 'Error'}


    start_placeid = ""
    for placeid in event['start_placeid']:
        start_placeid += placeid + "|"


    start_placeid = start_placeid[0:-1]

    end_placeid = ""
    for placeid in event['end_placeid']:
        end_placeid += placeid + '|'

    end_placeid = end_placeid[0:-1]


    #start_placeid = "place_id:ChIJSxh5JbJqkFQRxI1KoO7oZHs"
    #end_placeid = "place_id:ChIJ55fLWVtBkFQR0v31eadEoLM|place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE"
    #mode = "bicycling"

    key = "AIzaSyAFcqYxQE7IZjZtZ7tgMt_wb_1ghRCKbXk"
    mode = event['mode']
    url = "https://maps.googleapis.com/maps/api/distancematrix/json"
    params = {"origins":start_placeid,
              "destinations": end_placeid,
              "mode":mode,
              "key": key}

    response = requests.get(url, params)

    if not response.ok:
        return {'status': 'Error'}

    json_response = json.loads(response.content)
    if json_response['status'] != 'OK':
        return {'status': 'Error'}

    print(json_response)

    if json_response is None:
        return {'status': 'Error'}

    var aws = require('aws-sdk');
const doc = require("dynamodb-doc");
const dynamo = new doc.DynamoDB();

var lambda = new aws.Lambda({
    region: 'us-west-2'
});
var username = "";

exports.handler = (event, context, callback) => {
    console.log(event)

    function isConflictPresent(data, eventID, eventStart, eventEnd) {
        if (data == null || data.Count == 0){
            return false;
        }
        console.log("Inside is conflict present");
        var itemList = data.Items
        var isMeetingOverlaps = false

        for (var i = 0; i < itemList.length; i++) {
            if(itemList[i].id == eventID)
                continue;
            var item_start_time = itemList[i].eventStart;
            var item_end_time = itemList[i].eventEnd;

            var min = Math.min(eventStart, item_start_time)
            var max = Math.max(eventEnd, item_end_time)
            if ((max - min) < ((eventEnd - eventStart) + (item_end_time - item_start_time))) {
                isMeetingOverlaps = true
                break;
            }
        }
        return isMeetingOverlaps
    }



    function checkConflictOnLocationBasis(data,eventID, eventStart, eventEnd, origin, destination, travelMode){
        var itemList = data.Items

        var startmeetingDetails = null
        var endMeetinfDetails = null

        for(var i= 0; i < itemList.length; i++){
            if(itemList[i].id == eventID){
                continue;
            }

            if (itemList[i].eventStart > eventStart){
                //Next Meeting Information
                if (endMeetinfDetails == null){
                    endMeetinfDetails = itemList[i];
                    continue
                }

            if(endMeetinfDetails.eventStart > itemList[i].eventStart){
                endMeetinfDetails = itemList[i]
            }

            }else{
                //First Meeting Information
                if (startmeetingDetails == null){
                    startmeetingDetails = itemList[i];
                    continue;
                }

                if (startmeetingDetails.eventEnd < itemList[i].eventEnd){
                    startmeetingDetails = itemList[i];
                }
            }
        }


        if (startmeetingDetails != null){
            var previous_response = getDurationFromDistanceAPIInMins(startmeetingDetails.destination, origin, travelMode);
            var data = []
            startmeetingDetails.eventStart = startmeetingDetails.eventStart + previous_response
            data.push(startmeetingDetails)
            var result = isConflictPresent(data.Items,eventID,eventStart, eventEnd)
            if (result == true){
                return true;
            }
        }

        if(endMeetinfDetails != null){
        var next_response = getDurationFromDistanceAPIInMins(destination, endMeetinfDetails.eventStart,travelMode);
        var data = []
        data.push(endMeetinfDetails)

        var result = isConflictPresent(data.Items,eventID,eventStart + next_response , eventEnd)
        if(result == true){
            return true;
            }
        }
        return false;
    }

}

    result = []

    if 'rows' not in  json_response or len(json_response['rows']) == 0:
        return  None

    for row in json_response['rows']:
        if 'elements' not in row or len(row['elements']) == 0:
            continue
        for element in row['elements']:
            elem = {}
            if element['status'] == 'OK':
                elem['status'] = 'Ok'
                elem['distance_text'] = element['distance']['text']
                elem['distance_value'] = element['distance']['value']
                elem['duration_text'] = element['duration']['text']
                elem['duration_value'] = element['duration']['value']
            else:
                elem['status'] = 'Error'
            result.append(elem)


    print result
    return {'status': 'Ok' , "result":result}
