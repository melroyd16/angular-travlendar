import boto3
import json

client = boto3.client('pinpoint',region_name="us-east-1")

print(client)

response_apps = client.get_apps()
print("List of applications")
print(response_apps)


# AndroidPushNotification_MobileHub
name = "androidpushnotification_MobileHub"
Id = "30187d92e3a84f9bb5313f23b07038d4"



response_app_information = client.get_app(ApplicationId='30187d92e3a84f9bb5313f23b07038d4')
print("App Information")
print(response_app_information)

response = client.get_application_settings(
    ApplicationId='30187d92e3a84f9bb5313f23b07038d4'
)

print("Application Settings")
print(response)


print("Send Messages")
# Sending Messages to the single endPoint
endPoint = "eTUnwUGiaUA:APA91bGlLmRreuC4Ij97fN1_PWGS_arIqpt8EhVRs6VRBHHXuE0ruIRg3AKadKL-j3WkInVjwnDoN0n_n6jUQQ8QbsvTZrsl4OXyLcfQAhpAXOMhQR3v6f46zr3VPZHVR-9dJCxyImBl"

response = client.send_messages(
    ApplicationId='30187d92e3a84f9bb5313f23b07038d4',
    MessageRequest= {
      "Addresses":{
            endPoint:{"ChannelType" : "GCM"}
                },
      "MessageConfiguration": {
          "DefaultPushNotificationMessage" : {
            "Action" : "OPEN_APP",
            "Body" : "Message Body",
            "Title" : " Body Title"
          }
      }
  }
)
print(response)
print("Completed sending messages")

# Adding Method to pull data from the dynamoDB Database


dynamoDbClient = boto3.client('dynamodb')

# List of tables to validate if the access to dynamo db is given or not


response = dynamoDbClient.list_tables()

print("Response for List of Tables")
print(response)

# {'TableNames': ['awstesting-mobilehub-1322918507-pets', 'starter-mobilehub-520218620-pets', 'user_events', 'user_preferences']


# Query

# response = dynamoDbClient.scan(
#     TableName="user_events",
#     Select="ALL_ATTRIBUTES",
# )


response = dynamoDbClient.scan(
    # ExpressionAttributeNames={
    #     'AT': 'AlbumTitle',
    #     'ST': 'SongTitle',
    # },
    # ExpressionAttributeValues={
    #     ':a': {
    #         'S': 'No One You Know',
    #     },
    # },
    # FilterExpression='Artist = :a',
    # ProjectionExpression='#ST, #AT',
    TableName='user_events'
)

print("Response of getting table values")
print(response)


# Adding filter in table

# KeyConditionExpression: "#username = :u",
#   //         ProjectionExpression: "id, eventStart, eventEnd",
#   //         FilterExpression: "eventStart >= :start and eventStart <= :end",
#   //         ExpressionAttributeNames: {
#   //             "#username": "username"
#   //         },
#   //         ExpressionAttributeValues: {
#   //             ":u": username,
#   //             ":start": cal_eventStart,
#   //             ":end": cal_eventEnd
#   //         }



response = dynamoDbClient.scan(
    TableName='user_events',
    ExpressionAttributeNames={
        '#eventStart': 'eventStart'

    },
    ExpressionAttributeValues={
        ':eventStartStartWindowTime': {
            'N': '1519592400000'
        },
        ':eventStartEndWindowTime':{
            'N':  '1519599600000'
        },

    },
    FilterExpression='#eventStart >= :eventStartStartWindowTime and #eventStart <= :eventStartEndWindowTime',
)

print("Added Filter to get the table")
print(response)

# Parsing the responseJson

# You have meeting at 5
listOfItems = response['Items']

for items in listOfItems:
    print(items['eventEnd']['N'])
    print(items['username']['S'])
    print(items['eventTitle']['S'])
    print(items['destination']['M']['formatted_address']['S'])




# Need to get the token from the user Interface

print("Send Messages")
# Sending Messages to the single endPoint
endPoint = "eTUnwUGiaUA:APA91bGlLmRreuC4Ij97fN1_PWGS_arIqpt8EhVRs6VRBHHXuE0ruIRg3AKadKL-j3WkInVjwnDoN0n_n6jUQQ8QbsvTZrsl4OXyLcfQAhpAXOMhQR3v6f46zr3VPZHVR-9dJCxyImBl"

response = client.send_messages(
    ApplicationId='30187d92e3a84f9bb5313f23b07038d4',
    MessageRequest= {
      "Addresses":{
            endPoint:{"ChannelType" : "GCM",
                      "BodyOverride":"New XXXX messages",
                      "Context":{
                            'eventEnd':"1519599600000",
                            'eventStart':"1519592400000",
                            'origin_place_id':"ChIJa8f1cO8IK4cRhFzAxK2hLPc",
                            'origin_formatted_address':"1137 E Orange St, Tempe, AZ 85281, USA",
                            'destination_place_id' : "ChIJffoao2cJK4cRpDZy6Da-T8E",
                            "destination_formatted_address":"1312 N Scottsdale Rd, Scottsdale, AZ 85257, USA",
                            "travelMode":"walking",
                            'timeNeeded':"669", # In Seconds
                            'username':"addy3429@live.com",
                            'eventTitle':"lunch Test 2 - 4",
                            }
                        },
          endPoint: {"ChannelType": "GCM",
                     "BodyOverride": "New XXXX messages",
                     "Context": {
                         'eventEnd': "1519599600000",
                         'eventStart': "1519592400000",
                         'origin_place_id': "ChIJa8f1cO8IK4cRhFzAxK2hLPc",
                         'origin_formatted_address': "1137 E Orange St, Tempe, AZ 85281, USA",
                         'destination_place_id': "ChIJffoao2cJK4cRpDZy6Da-T8E",
                         "destination_formatted_address": "1312 N Scottsdale Rd, Scottsdale, AZ 85257, USA",
                         "travelMode": "walking",
                         'timeNeeded': "669",  # In Seconds
                         'username': "addy3429@live.com",
                         'eventTitle': "lunch Test 2 - 4",
                     }
                     }
      },
      "MessageConfiguration": {
          "DefaultPushNotificationMessage" : {
            "Action" : "OPEN_APP",
            "Body" : "Message Body",
            "Title" : " Body Title"
          }
      }
      }
)

print(response)
print("Completed sending messages")





