var AWS = require('aws-sdk');

exports.handler = (event, context, callback) => {
  var snsApplicationARN = "arn:aws:sns:us-west-2:016911789346:app/GCM/PushNotificationExample2";

  sendNotification();

  function sendNotification(){
    getListOfENdPointsForGivenUser("mehul_shah_19")

  }

  function getListOfENdPointsForGivenUser(username){
    console.log(username)
    var listOfEndPoints = [];

    var snsClient = new AWS.SNS();

    var params = {
      PlatformApplicationArn: snsApplicationARN
    }

    snsClient.listEndpointsByPlatformApplication(params, function(err, data) {
      if (err) {
        console.log("Error in fetching the list of EndPoints");
        console.log(err, err.stack); // an error occurred

      }else {
        console.log(data);           // successful response
        if (data !== null || data['Endpoints'] !== null && data['Endpoints'].length > 0){
          for(var i =0 ; i < data['Endpoints'].length; i++){
            var endPoint = data['Endpoints'][i];

            if(endPoint !== null && endPoint['Attributes'] !== null && endPoint['Attributes']['CustomUserData'] !== null &&
              endPoint['Attributes']['CustomUserData'] === username)
            { console.log(endPoint['EndpointArn']);
              console.log(endPoint['Attributes']['Token']);
              console.log(endPoint['Attributes']['CustomUserData']);
              listOfEndPoints.push(endPoint['EndpointArn'])
            }
          }
        }
      }
      for(var i = 0 ; i < listOfEndPoints.length ; i++){
        console.log("ENDPOINTS");
        console.log(listOfEndPoints[i]);
        }
        sendPushNotificationToEndPoints(listOfEndPoints)
    });
  }



  function sendPushNotificationToEndPoints(listOfEndPoints){
    var message = "You have meeting at location "
    var snsClient = new AWS.SNS()

    if(listOfEndPoints !== null && listOfEndPoints.length > 0){
      for(var i = 0 ; i < listOfEndPoints.length ; i++){

          var params = {
              Message: message,
              TargetArn: listOfEndPoints[i]
            };

          snsClient.publish(params, function(err, data){
              if (err) console.log(err, err.stack); // an error occurred
              else     console.log(data);
          });
      }
    }
    deleteRules(event.ruleToDelete.ruleName, event.ruleToDelete.policyId);
  }



  function deleteRules(ruleName, policyId) {
    var cloudwatchevents = new AWS.CloudWatchEvents();
    var lambda = new AWS.Lambda();
    var params = {
      Ids: ['sendPushNotification'],
      Rule: ruleName
    };
    cloudwatchevents.removeTargets(params, function (err, data) {
      if (err) console.log(err, err.stack);
      else {
        var params = {
          Name: ruleName
        };
        cloudwatchevents.deleteRule(params, function (err, data) {
          if (err) console.log(err, err.stack);
        });
      }
    });
    var params = {
      FunctionName: 'sendPushNotification',
      StatementId: policyId,
    };
    lambda.removePermission(params, function (err, data) {
      if (err) console.log(err, err.stack);
    });
  }
};
